{% extends 'base.html.twig' %}

{% block body %}
    <!-- Basic Example | Horizontal Layout -->
    <div class="row clearfix">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">

            <div class="card col-lg-5 col-md-5 col-sm-5 col-xs-5" style="width: 48%;">
                <a style="position: absolute; top: 0;right: 0;font-size: 18px; display: none;"
                   data-toggle="confirmation"
                   href="#"
                   id="buy-edit-cancel-button"
                   class="btn fancybox default btc-circle edit btn-xs green"
                   title="Edit"><i id="buy-edit-cancel-icon" class="material-icons">edit</i></a>
                <div class="header">
                    <h2>
                        <b>BUY {{ data['symbol'] }}</b> (<span
                                id="{{ data['symbol'] | lower }}" class="live-price">{{ data['price'] }}</span>)
                    </h2>
                </div>
                <div class="body">
                    <form id="form_advanced_validation" class="buy-rule-form" method="POST"
                          action="{{ path('binance-api-post-add-rule', {symbol: data['symbol']}) }}"
                          data-post-type="ADD">

                        <label class="form-group">BTC: <span
                                    id="buy-btc-price">{{ data['btcPrice'] | number_format(8) }}</span>
                            <a class="buy-percent" data-percent="100">[%100]</a>
                            <a class="buy-percent" data-percent="75">[%75]</a>
                            <a class="buy-percent" data-percent="50">[%50]</a>
                            <a class="buy-percent" data-percent="25">[%25]</a>
                            <label class="form-group"> <span
                                        id="" style="margin: 5px;"></span></label>
                        </label>
                        <label>Parent Rule</label>
                        <div class="form-group form-float">
                            <select class="form-control show-tick rule-select" name="rule-parent-id" id="buy-select">
                                <option value="" data-href="">-- Any Rule --</option>
                                {% for rule in data['insertedRules'] %}
                                    <option class="option-{{ rule.id }}"
                                            data-href="{{ path('binance-api-get-rule', {id: rule.id}) }}"
                                            data-rule-quantity="{{ rule.quantity }}"
                                            data-rule-type="{{ rule.type }}"
                                            data-rule-btc="{{ rule.btcPrice }}"
                                            data-rule-gain-btc="{{ rule.gainBtcPrice }}"
                                            data-rule-gain-quantity="{{ rule.gainQuantity }}"
                                            value="{{ rule.id }}">{{ rule.type ~ " [PRICE:" ~ rule.btcPrice ~ " - STOP:" ~ rule.stop ~ "] - [QUANTITY:" ~ rule.quantity ~ "] - [DATE:" ~ rule.createdAt|date('d.m.Y') ~ "]" }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        <label>Quantity</label>
                        <div class="form-group form-float">
                            <div class="form-line">
                                <input type="number" class="form-control" id="buy-quantity"
                                       placeholder="{{ data['quantity'] }}" name="quantity"
                                       value="{{ data['quantity'] }}"
                                       minlength="1"
                                       required>
                            </div>
                            <div class="help-info">Limit rule to be purchased.</div>
                        </div>
                        <label>Buy Limit</label>
                        <div class="form-group form-float">
                            <div class="form-line">
                                <input type="number" class="form-control" id="buy-rule-limit"
                                       placeholder="{{ data['price'] }}" name="limit" value="{{ data['price'] }}"
                                       maxlength="10"
                                       minlength="10"
                                       required>
                            </div>
                            <div class="help-info">Limit rule to be purchased.</div>
                        </div>
                        <label>Stop</label>
                        <div class="form-group form-float">
                            <div class="form-line">
                                <input type="number" class="form-control" id="buy-rule-stop"
                                       placeholder="{{ data['price'] }}" name="stop" value="" maxlength="10"
                                       minlength="10">
                            </div>
                            <div class="help-info">(Optional)</div>
                        </div>
                        <button id="buy-save" class="btn btn-primary waves-effect" type="submit">SAVE</button>
                    </form>
                </div>
            </div>


            <div class="card col-lg-5 col-md-5 col-sm-5 col-xs-5 right" style="width: 48%;">
                <a style="position: absolute; top: 0;right: 0;font-size: 18px; display: none;"
                   data-toggle="confirmation"
                   href="#"
                   id="sell-edit-cancel-button"
                   class="btn fancybox default btc-circle edit btn-xs green"
                   title="Edit"><i id="sell-edit-cancel-icon" class="material-icons">edit</i></a>
                <div class="header">
                    <h2>
                        <b>SELL {{ data['symbol'] }}</b> (<span
                                id="{{ data['symbol'] | lower }}" class="live-price">{{ data['price'] }}</span>)

                    </h2>
                </div>
                <div class="body">
                    <form id="form_advanced_validation" class="sell-rule-form" method="POST"
                          action="{{ path('binance-api-post-add-rule', {symbol: data['symbol']}) }}"
                          data-post-type="ADD">

                        <label class="form-group">{{ data['symbol'] }} (Qty): <span
                                    id="symbol-available">{{ data['symbolAvailable'] }}</span>
                            <a class="sell-percent" data-percent="100">[%100]</a>
                            <a class="sell-percent" data-percent="75">[%75]</a>
                            <a class="sell-percent" data-percent="50">[%50]</a>
                            <a class="sell-percent" data-percent="25">[%25]</a>
                            <label class="form-group">Gain BTC: <span
                                        id="sell-btc-price"></span></label>
                        </label>
                        <label>Parent Rule</label>
                        <div class="form-group form-float">
                            <select class="form-control show-tick rule-select" name="rule-parent-id" id="sell-select">
                                <option value="" data-href="">-- Any Rule --</option>
                                {% for rule in data['insertedRules'] %}
                                    <option class="option-{{ rule.id }}" data-rule-quantity="{{ rule.quantity }}"
                                            data-rule-type="{{ rule.type }}"
                                            data-rule-btc="{{ rule.btcPrice }}"
                                            data-rule-gain-btc="{{ rule.gainBtcPrice }}"
                                            data-rule-gain-quantity="{{ rule.gainQuantity }}"
                                            data-href="{{ path('binance-api-get-rule', {id: rule.id}) }}"
                                            value="{{ rule.id }}">{{ rule.type ~ " [PRICE:" ~ rule.btcPrice ~ " - STOP:" ~ rule.stop ~ "] - [QUANTITY:" ~ rule.quantity ~ "] - [DATE:" ~ rule.createdAt|date('d.m.Y') ~ "]" }}</option>
                                {% endfor %}
                            </select>
                        </div>
                        <label>Quantity</label>
                        <div class="form-group form-float">
                            <div class="form-line">
                                <input type="number" class="form-control" id="sell-quantity"
                                       placeholder="{{ data['symbolQuantity'] }}" name="quantity"
                                       value="{{ data['symbolQuantity'] }}"
                                       minlength="1"
                                       required>
                            </div>
                            <div class="help-info">Limit rule to be purchased.</div>
                        </div>
                        <label>Sell Limit</label>
                        <div class="form-group form-float">
                            <div class="form-line">
                                <input type="number" class="form-control" id="sell-rule-limit"
                                       placeholder="{{ data['price'] }}" name="limit" value="{{ data['price'] }}"
                                       maxlength="10"
                                       minlength="10"
                                       required>
                            </div>
                            <div class="help-info">Limit rule to be purchased.</div>
                        </div>
                        <label>Stop</label>
                        <div class="form-group form-float">
                            <div class="form-line">
                                <input type="number" class="form-control" id="sell-rule-stop"
                                       placeholder="{{ data['price'] }}" name="stop" value="" maxlength="10"
                                       minlength="10">
                            </div>
                            <div class="help-info">(Optional)</div>
                        </div>
                        <button id="sell-save" class="btn btn-primary waves-effect" type="submit">SAVE</button>
                    </form>
                </div>
            </div>

        </div>
    </div>


    <div class="row clearfix">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="card">
                <div class="header">
                    <h2>
                        {{ data['symbol'] }} Rules
                        <small>You can take actions for your rules.</small>
                    </h2>
                </div>
                <div class="body table-responsive">
                    <table class="table table-bordered">
                        <thead>
                        <tr>
                            <th>ID</th>
                            <th>PARENT ID</th>
                            <th>TYPE</th>
                            <th>STOP / LIMIT</th>
                            <th>BTC</th>
                            <th>QUANTITY</th>
                            <th>DATE</th>
                            <th>ACTIONS</th>
                        </tr>
                        </thead>
                        <tbody id="table-body">
                        {% for insertedRule in data['insertedRules'] %}
                            <tr class="list-item-block">
                                <th scope="row">{{ insertedRule.id }}</th>
                                <th scope="row"
                                    class="list-parent-id-{{ insertedRule.id }}">{{ (insertedRule.parentRule.id is defined) ? insertedRule.parentRule.id : '' }}</th>
                                <td>{{ insertedRule.type }}</td>
                                <td class="list-stop-limit-{{ insertedRule.id }}">{{ insertedRule.stop ~ " / " ~ insertedRule.ruleLimit }}</td>
                                <td class="list-btc-price-{{ insertedRule.id }}">{{ insertedRule.btcPrice }}</td>
                                <td class="list-quantity-{{ insertedRule.id }}">{{ insertedRule.quantity }}</td>
                                <td>{{ insertedRule.createdAt | date('d.m.Y H:i:s') }}</td>
                                <td>
                                    {% if insertedRule.haveParentOrChildRule == false %}
                                        <a data-toggle="confirmation"
                                           href="{{ path('binance-api-get-rule', {id: insertedRule.id}) }}"
                                           class="btn fancybox default edit btn-xs green {{ insertedRule.id }}"
                                           title="Edit"><i class="material-icons">edit</i></a>
                                    {% endif %}
                                    <a data-toggle="confirmation"
                                       href="{{ path('binance-api-remove-rule-wtih-children', {id: insertedRule.id}) }}"
                                       data-type="confirm"
                                       class="btn fancybox default delete btn-xs green"
                                       id="{{ insertedRule.id }}"
                                       title="Delete"><i class="material-icons">delete</i></a>
                                </td>
                            </tr>
                        {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

{% endblock %}


{% block javascripts %}
    <script src="{{ asset("assets/plugins/jquery-validation/jquery.validate.js") }}"></script>
    <script src="{{ asset("assets/plugins/sweetalert/sweetalert.min.js") }}"></script>
    <script src="{{ asset("assets/js/demo.js") }}"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            var symbol = "{{ data['symbol'] }}";
            var url = "wss://stream.binance.com:9443/ws/" + symbol.toLowerCase() + "@aggTrade";
            var prices = [];
            w = new WebSocket(url);
            w.onopen = function () {
            };
            w.onmessage = function (e) {
                var data = JSON.parse(e.data.toString());
                if (!prices[symbol]) {
                    prices[symbol] = data.p;
                } else {
                    if (prices[symbol] > data.p) {
                        $('.live-price').text(data.p).css('color', '#FD3F32');
                    } else {
                        $('.live-price').text(data.p).css('color', '#5AE25A');
                    }
                }
            };

            var symbolQuantity = "{{ data['symbolQuantity'] }}";
            symbolQuantity = (symbolQuantity < 1) ? parseFloat(symbolQuantity) : parseInt(symbolQuantity);
            var gainBtc = symbolQuantity * parseFloat($('.live-price').text());
            $('#sell-btc-price').text(gainBtc.toFixed(8));

            //$(".live-price").click(function () {
            //    $("#buy-rule-limit").val($(this).text());
            //});

            $('#buy-save').click(function (e) {
                e.preventDefault();
                var btcPrice = parseFloat($('#buy-btc-price').text()).toFixed(8);
                var userBtcPrice = parseFloat("{{ data['btcPrice'] }}");
                var parentRuleType = $('#buy-select option:selected').data('rule-type');
                if (btcPrice < 0.00010000 || (parentRuleType !== 'SELL' && btcPrice > userBtcPrice)) {
                    iziToast.error({
                        title: 'ERROR',
                        message: "Balance is not enough!"
                    });
                    return false;
                }
                var buyBtcInput = $("<input>")
                    .attr("type", "hidden")
                    .attr("name", "btc-price").val(btcPrice);
                var buyRuleTypeInput = $("<input>")
                    .attr("type", "hidden")
                    .attr("name", "rule-type").val("BUY");
                if ($('#buy-rule-stop').val() !== '') {
                    if ($('#buy-rule-stop').val() > $('#buy-rule-limit').val()) {
                        iziToast.error({
                            title: 'ERROR',
                            message: "Stop should smaller than buy limit!"
                        });
                        return false;
                    }
                    if ($('#buy-rule-stop').val() > $('.live-price').text()) {
                        var buyStopTypeInput = $("<input>")
                            .attr("type", "hidden")
                            .attr("name", "stop-type").val("greater");
                    } else if ($('#buy-rule-stop').val() < $('.live-price').text()) {
                        var buyStopTypeInput = $("<input>")
                            .attr("type", "hidden")
                            .attr("name", "stop-type").val("smaller");
                    }
                }
                var buyRuleForm = $('.buy-rule-form');
                buyRuleForm.append(buyBtcInput);
                buyRuleForm.append(buyStopTypeInput);
                buyRuleForm.append(buyRuleTypeInput);

                $.ajax({
                    type: "POST",
                    url: buyRuleForm.attr('action'),
                    data: buyRuleForm.serialize(),
                    success: function (data) {
                        if (!data.error) {
                            var optionText = data.rule.type + " [PRICE:" + data.rule.btcPrice + " - STOP:" + data.rule.stop + "] - [QUANTITY:" + data.rule.quantity + "] - [DATE:" + data.rule.createdAt + "]";
                            var option = "<option class='option-" + data.rule.id + "'" +
                                "  data-href='/binance-api/rule/" + data.rule.id + "'" +
                                "  data-rule-quantity='" + data.rule.quantity + "'" +
                                "  data-rule-type='" + data.rule.type + "'" +
                                "  data-rule-btc='" + data.rule.btcPrice + "'" +
                                "  data-rule-gain-btc='" + data.rule.gainBtcPrice + "'" +
                                "  data-rule-gain-quantity='" + data.rule.gainQuantity + "'" +
                                "  value='" + data.rule.id + "'>" + optionText + "</option>";
                            $('.rule-select').append(option).trigger("change");

                            var postType = buyRuleForm.data('post-type');
                            if (postType === 'ADD') {
                                var tableBody = $('#table-body');
                                var trBody = "<tr class='list-item-block'>" +
                                    "<th scope='row'>" + data.rule.id + "</th>" +
                                    "<th scope='row'>";
                                trBody += (data.rule.parentRule) ? data.rule.parentRule.id : '';
                                trBody += "</th>" +
                                    "<td>" + data.rule.type + "</td>" +
                                    "<td>" + data.rule.stop + " / " + data.rule.ruleLimit + "</td>" +
                                    "<td>" + data.rule.btcPrice + "</td>" +
                                    "<td>" + data.rule.quantity + "</td>" +
                                    "<td>" + data.rule.createdAt + "</td>";
                                trBody += "<td>";
                                if (!data.rule.haveParentOrChildRule) {
                                    trBody += "<a data-toggle='confirmation' " +
                                        "href='/binance-api/rule/" + data.rule.id + "'" +
                                        " class='btn fancybox default edit btn-xs green " + data.rule.id + "' " +
                                        "title='Edit'><i class='material-icons'>edit</i></a>"
                                } else {
                                    if (data.rule.parentRule) {
                                        $('.' + data.rule.parentRule.id).remove();
                                    }
                                }
                                trBody += "<a data-toggle='confirmation'" +
                                    " href='/binance-api/removeRuleWithChildren/" + data.rule.id + "'" +
                                    " data-type='confirm'" +
                                    " class='btn fancybox default delete btn-xs green'" +
                                    " id='" + data.rule.id + "'" +
                                    " title='Delete'><i class='material-icons'>delete</i></a>"
                                trBody += "</td>";
                                tableBody.append(trBody);
                            } else if (postType === 'EDIT') {
                                $('.list-quantity-' + data.rule.id).text(data.rule.quantity);
                                $('.list-btc-price-' + data.rule.id).text(data.rule.btcPrice);
                                $('.list-stop-limit-' + data.rule.id).text(data.rule.stop + " / " + data.rule.ruleLimit);
                                if (data.rule.parentRule) {
                                    $('.list-parent-id-' + data.rule.id).text(data.rule.parentRule.id);
                                    $('#' + data.rule.id + ' #' + data.rule.parentRule.id).closest('.edit').remove();
                                }
                            }

                            iziToast.success({
                                title: 'SUCCESS',
                                message: data.message
                            });
                        } else {
                            iziToast.error({
                                title: 'ERROR',
                                message: data.message
                            });
                        }
                    }
                });
            });

            $('#sell-save').click(function (e) {
                e.preventDefault();
                var sellBtcPrice = $('#sell-btc-price');
                var sellQuantity = $('#sell-quantity').val();
                var selectedvalue = $("#sell-select").val();
                if (!selectedvalue) {
                    var validQuantity = parseFloat("{{ data['symbolQuantity'] }}");
                    if (sellQuantity > validQuantity) {
                        iziToast.error({
                            title: 'ERROR',
                            message: "Balance is not enough!"
                        });
                        return false;
                    }
                }
                if (sellBtcPrice < 0.00010000) {
                    iziToast.error({
                        title: 'ERROR',
                        message: "Balance is not enough!"
                    });
                    return false;
                }

                var sellBtcInput = $("<input>")
                    .attr("type", "hidden")
                    .attr("name", "btc-price").val($('#sell-btc-price').text());
                if ($('#sell-rule-stop').val() !== '') {
                    if ($('#sell-rule-stop').val() > $('#sell-rule-limit').val()) {
                        iziToast.error({
                            title: 'ERROR',
                            message: "Stop should greater than buy limit!"
                        });
                        return false;
                    }
                    if ($('#sell-rule-stop').val() > $('.live-price').text()) {
                        var sellStopTypeInput = $("<input>")
                            .attr("type", "hidden")
                            .attr("name", "stop-type").val("greater");
                    } else if ($('#buy-rule-stop').val() < $('.live-price').text()) {
                        var sellStopTypeInput = $("<input>")
                            .attr("type", "hidden")
                            .attr("name", "stop-type").val("smaller");
                    }
                }
                var sellRuleTypeInput = $("<input>")
                    .attr("type", "hidden")
                    .attr("name", "rule-type").val("SELL");
                var sellRuleForm = $('.sell-rule-form');
                sellRuleForm.append(sellBtcInput);
                sellRuleForm.append(sellStopTypeInput);
                sellRuleForm.append(sellRuleTypeInput);

                $.ajax({
                    type: "POST",
                    url: sellRuleForm.attr('action'),
                    data: sellRuleForm.serialize(),
                    success: function (data) {
                        if (!data.error) {
                            var optionText = data.rule.type + " [PRICE:" + data.rule.btcPrice + " - STOP:" + data.rule.stop + "] - [QUANTITY:" + data.rule.quantity + "] - [DATE:" + data.rule.createdAt + "]";
                            var option = "<option class='option-" + data.rule.id + "'" +
                                "  data-href='/binance-api/rule/" + data.rule.id + "'" +
                                "  data-rule-quantity='" + data.rule.quantity + "'" +
                                "  data-rule-type='" + data.rule.type + "'" +
                                "  data-rule-btc='" + data.rule.btcPrice + "'" +
                                "  data-rule-gain-btc='" + data.rule.gainBtcPrice + "'" +
                                "  data-rule-gain-quantity='" + data.rule.gainQuantity + "'" +
                                "  value='" + data.rule.id + "'>" + optionText + "</option>";
                            $('.rule-select').append(option).trigger("change");

                            var postType = sellRuleForm.data('post-type');
                            if (postType === 'ADD') {
                                var tableBody = $('#table-body');
                                var trBody = "<tr class='list-item-block'>" +
                                    "<th scope='row'>" + data.rule.id + "</th>" +
                                    "<th scope='row'>";
                                trBody += (data.rule.parentRule) ? data.rule.parentRule.id : '';
                                trBody += "</th>" +
                                    "<td>" + data.rule.type + "</td>" +
                                    "<td>" + data.rule.stop + " / " + data.rule.ruleLimit + "</td>" +
                                    "<td>" + data.rule.btcPrice + "</td>" +
                                    "<td>" + data.rule.quantity + "</td>" +
                                    "<td>" + data.rule.createdAt + "</td>";
                                trBody += "<td>";
                                if (!data.rule.haveParentOrChildRule) {
                                    trBody += "<a data-toggle='confirmation' " +
                                        "href='/binance-api/rule/" + data.rule.id + "'" +
                                        " class='btn fancybox default edit btn-xs green " + data.rule.id + "' " +
                                        "title='Edit'><i class='material-icons'>edit</i></a>"
                                } else {
                                    if (data.rule.parentRule) {
                                        $('.' + data.rule.parentRule.id).remove();
                                    }
                                }
                                trBody += "<a data-toggle='confirmation'" +
                                    " href='/binance-api/removeRuleWithChildren/" + data.rule.id + "'" +
                                    " data-type='confirm'" +
                                    " class='btn fancybox default delete btn-xs green'" +
                                    " id='" + data.rule.id + "'" +
                                    " title='Delete'><i class='material-icons'>delete</i></a>";
                                trBody += "</td>";
                                tableBody.append(trBody);
                            } else if (postType === 'EDIT') {
                                $('.list-quantity-' + data.rule.id).text(data.rule.quantity);
                                $('.list-btc-price-' + data.rule.id).text(data.rule.btcPrice);
                                $('.list-stop-limit-' + data.rule.id).text(data.rule.stop + " / " + data.rule.ruleLimit);
                                if (data.rule.parentRule) {
                                    $('.list-parent-id-' + data.rule.id).text(data.rule.parentRule.id);
                                    $('#' + data.rule.id + ' #' + data.rule.parentRule.id).closest('.edit').remove();
                                }
                            }

                            iziToast.success({
                                title: 'SUCCESS',
                                message: data.message
                            });
                        } else {
                            iziToast.error({
                                title: 'ERROR',
                                message: data.message
                            });
                        }
                    }
                });
            });


            $('#buy-rule-limit').on('input', function (e) {
                var buyLimit = $(this).val();
                var limit = parseInt($(this).attr('maxlength'));
                var chars = buyLimit.length;
                if (chars > limit) {
                    var new_text = buyLimit.substr(0, limit);
                    $(this).val(new_text);
                } else {
                    var quantity = $('#buy-quantity').val();
                    if (quantity !== '' && buyLimit !== '') {
                        var result = quantity * buyLimit;
                        $('#buy-btc-price').text(result.toFixed(8));
                    }
                }
            });

            $('#sell-rule-limit').on('input', function (e) {
                var sellLimit = $(this).val();
                var limit = parseInt($(this).attr('maxlength'));
                var chars = sellLimit.length;
                if (chars > limit) {
                    var new_text = sellLimit.substr(0, limit);
                    $(this).val(new_text);
                } else {
                    var quantity = $('#sell-quantity').val();
                    if (quantity !== '' && sellLimit !== '') {
                        var result = quantity * sellLimit;
                        $('#sell-btc-price').text(result.toFixed(8));
                    }
                }
            });

            $('#buy-quantity').on('input', function (e) {
                var quantity = $(this).val();
                var buyLimit = $('#buy-rule-limit').val();
                if (quantity !== '' && buyLimit !== '') {
                    var result = quantity * buyLimit;
                    $('#buy-btc-price').text(result.toFixed(8));
                }
            });

            $('#sell-quantity').on('input', function (e) {
                var quantity = $(this).val();
                var sellLimit = $('#sell-rule-limit').val();
                if (quantity !== '' && sellLimit !== '') {
                    var result = quantity * sellLimit;
                    $('#sell-btc-price').text(result.toFixed(8));
                }
            });


            $('#buy-rule-stop').on('input', function (e) {
                var stop = $(this).val();
                var limit = parseInt($(this).attr('maxlength'));
                var chars = stop.length;
                if (chars > limit) {
                    var new_text = stop.substr(0, limit);
                    $(this).val(new_text);
                }
            });

            $('#sell-rule-stop').on('input', function (e) {
                var stop = $(this).val();
                var limit = parseInt($(this).attr('maxlength'));
                var chars = stop.length;
                if (chars > limit) {
                    var new_text = stop.substr(0, limit);
                    $(this).val(new_text);
                }
            });

            $('.buy-percent').click(function () {
                var percent = parseInt($(this).data('percent'));
                var parentRuleQuantity = $('#buy-select option:selected').data('rule-quantity');
                var parentRuleType = $('#buy-select option:selected').data('rule-type');
                var gainBtcPrice = $('#buy-select option:selected').data('rule-gain-btc');
                var ruleBtcPrice = $('#buy-select option:selected').data('rule-btc');
                var userBtcPrice = "{{ data['btcPrice'] }}";
                gainBtcPrice = (gainBtcPrice < 1) ? parseFloat(gainBtcPrice) : parseInt(gainBtcPrice);
                ruleBtcPrice = (ruleBtcPrice < 1) ? parseFloat(ruleBtcPrice) : parseInt(ruleBtcPrice);
                userBtcPrice = (userBtcPrice < 1) ? parseFloat(userBtcPrice) : parseInt(userBtcPrice);
                if (parentRuleQuantity > -1) {
                    if (parentRuleType === 'BUY') {
                        userBtcPrice = userBtcPrice - ruleBtcPrice;
                    } else if (parentRuleType === 'SELL') {
                        userBtcPrice = userBtcPrice + gainBtcPrice;
                    }
                    userBtcPrice = (userBtcPrice <= -1) ? 0 : userBtcPrice;
                }
                userBtcPrice = (userBtcPrice * percent) / 100;
                $('#buy-btc-price').text(userBtcPrice.toFixed(8));
                var buyLimit = $('#buy-rule-limit');
                var validQuantity = userBtcPrice / buyLimit.val();
                if (parseInt(validQuantity) < 1) {
                    validQuantity = parseFloat(validQuantity.toFixed(8));
                } else {
                    validQuantity = parseInt(validQuantity);
                }
                $('#buy-quantity').val(validQuantity);
            });

            $('.sell-percent').click(function () {
                var parentRuleQuantity = $("#sell-select option:selected").data('rule-quantity');
                var parentRuleType = $("#sell-select option:selected").data('rule-type');
                var symbolQuantity = ("{{ data['symbolQuantity'] }}" < 1) ? parseFloat("{{ data['symbolQuantity'] }}") : parseInt("{{ data['symbolQuantity'] }}");
                var gainQuantity = $('#sell-select option:selected').data('rule-gain-quantity');
                gainQuantity = (gainQuantity < 1) ? parseFloat(gainQuantity) : parseInt(gainQuantity);
                if (parentRuleQuantity > -1) {
                    parentRuleQuantity = (parentRuleQuantity < 1) ? parseFloat(parentRuleQuantity) : parseInt(parentRuleQuantity);
                    if (parentRuleType === 'BUY') {
                        symbolQuantity = gainQuantity + symbolQuantity;
                    } else if (parentRuleType === 'SELL') {
                        symbolQuantity = symbolQuantity - parentRuleQuantity;
                        symbolQuantity = (symbolQuantity <= -1) ? 0 : symbolQuantity;
                    }
                }
                var percent = parseInt($(this).data('percent'));
                var validQuantity = (symbolQuantity * percent) / 100;
                if (parseInt(validQuantity) < 1) {
                    validQuantity = validQuantity.toFixed(8);
                } else {
                    validQuantity = parseInt(validQuantity);
                }
                var gainBtcPrice = validQuantity * $("#sell-rule-limit").val();
                $('#sell-quantity').val(validQuantity);
                $('#symbol-available').text(validQuantity);
                $('#sell-btc-price').text(gainBtcPrice.toFixed(8));
            });

            $('#buy-edit-cancel-button').on('mouseover', function () {
                $('#buy-edit-cancel-icon').text('cancel');
            });
            $('#buy-edit-cancel-button').on('mouseout', function () {
                $('#buy-edit-cancel-icon').text('edit');
            });
            $('#sell-edit-cancel-button').on('mouseover', function () {
                $('#sell-edit-cancel-icon').text('cancel');
            });
            $('#sell-edit-cancel-button').on('mouseout', function () {
                $('#sell-edit-cancel-icon').text('edit');
            });

            $('#buy-edit-cancel-button').on('click', function () {
                $(this).hide();
                $('#buy-rule-stop').val('');
                $('#buy-rule-limit').val($('.live-price:first').text());
                $('#buy-quantity').val('');
                $('#buy-btc-price').text("{{ data['btcPrice'] }}");
                var buyRuleForm = $('.buy-rule-form');
                buyRuleForm.attr('action', '/binance-api/rule/' + "{{ data['symbol'] }}");
                buyRuleForm.attr('data-post-type', 'ADD');
                $('#buy-select').val('');
            });

            $('#sell-edit-cancel-button').on('click', function () {
                $(this).hide();
                $('#sell-rule-stop').val('');
                $('#sell-rule-limit').val($('.live-price:first').text());
                $('#sell-quantity').val('');
                $('#sell-btc-price').text(0.00000000);
                var sellRuleForm = $('.sell-rule-form');
                sellRuleForm.attr('action', '/binance-api/rule/' + "{{ data['symbol'] }}");
                sellRuleForm.attr('data-post-type', 'ADD');
                $('#sell-select').val('');
            });

            $('#buy-select').on('change', function () {
                var ruleUrl = $("#buy-select option:selected").data('href');
                var userBtcPrice = "{{ data['btcPrice'] }}";
                userBtcPrice = parseFloat(userBtcPrice);
                if (ruleUrl) {
                    $.ajax
                    ({
                        type: "GET",
                        url: ruleUrl,
                        success: function (data) {
                            if (!data.error) {
                                data.rule.quantity = (data.rule.quantity < 1) ? parseFloat(data.rule.quantity) : parseInt(data.rule.quantity);
                                data.rule.btcPrice = parseFloat(data.rule.btcPrice);
                                var quantity = 0;
                                var btc = 0;
                                if (data.rule.type === 'BUY') {
                                    btc = userBtcPrice - data.rule.btcPrice;
                                    quantity = btc / $('#buy-rule-limit').val();
                                } else if (data.rule.type === 'SELL') {
                                    var gainBtcPrice = data.rule.gainBtcPrice;
                                    btc = userBtcPrice + parseFloat(gainBtcPrice);
                                    quantity = btc / $('#buy-rule-limit').val();
                                }
                                quantity = (quantity > -1 && quantity < 1) ? parseFloat(quantity.toFixed(8)) : parseInt(quantity);
                                $('#buy-btc-price').text(btc.toFixed(8));
                                $('#buy-quantity').val(quantity);
                            } else {
                                iziToast.error({
                                    title: 'ERROR',
                                    message: data.message
                                });
                            }
                        }
                    });
                } else {
                    var buyLimit = $("#buy-rule-limit").val();
                    var validQuantity = userBtcPrice / buyLimit;
                    if (parseInt(validQuantity) < 1) {
                        validQuantity = parseFloat(validQuantity.toFixed(8));
                    } else {
                        validQuantity = parseInt(validQuantity);
                    }
                    $('#buy-quantity').val(validQuantity);
                    var remainingBtc = validQuantity * buyLimit;
                    $('#buy-btc-price').text(remainingBtc.toFixed(8));
                }
            });

            $('#sell-select').on('change', function () {
                var ruleUrl = $("#sell-select option:selected").data('href');
                if (ruleUrl) {
                    $.ajax
                    ({
                        type: "GET",
                        url: ruleUrl,
                        success: function (data) {
                            if (!data.error) {
                                var userSymbolQuantity = "{{ data['symbolQuantity'] }}";
                                data.rule.quantity = (data.rule.quantity < 1) ? parseFloat(data.rule.quantity) : parseInt(data.rule.quantity);
                                userSymbolQuantity = (userSymbolQuantity < 1) ? parseFloat(userSymbolQuantity) : parseInt(userSymbolQuantity);
                                var gainBtcPrice = 0;
                                if (data.rule) {
                                    if (data.rule.type === 'BUY') {
                                        var gainQuantity = parseFloat(data.rule.gainQuantity);
                                        gainQuantity = (gainQuantity < 1) ? parseFloat(gainQuantity) : parseInt(gainQuantity);
                                        var totalQuantity = gainQuantity + userSymbolQuantity;
                                        $('#sell-quantity').val(totalQuantity);
                                        $('#symbol-available').text(totalQuantity);
                                        gainBtcPrice = totalQuantity * $("#sell-rule-limit").val();
                                        if (parseInt(gainBtcPrice) > 1) {
                                            $('#sell-btc-price').text(gainBtcPrice);
                                        } else {
                                            $('#sell-btc-price').text(gainBtcPrice.toFixed(8));
                                        }
                                    } else if (data.rule.type === 'SELL') {
                                        var remainingQuantity = (userSymbolQuantity - data.rule.quantity);
                                        remainingQuantity = (remainingQuantity <= -1) ? 0 : remainingQuantity;
                                        remainingQuantity = (remainingQuantity < 0 && remainingQuantity > -1) ? parseFloat(remainingQuantity.toFixed(8)) : parseInt(remainingQuantity);
                                        $("#sell-quantity").val(remainingQuantity);
                                        $("#symbol-available").text(remainingQuantity);
                                        gainBtcPrice = data.rule.quantity * $("#sell-rule-limit").val();
                                        $("#sell-btc-price").text(gainBtcPrice.toFixed(8));
                                    }
                                }
                            } else {
                                iziToast.error({
                                    title: 'ERROR',
                                    message: data.message
                                });
                            }
                        }
                    });
                } else {
                    var validSymbolQuantity = "{{ data['symbolQuantity'] }}";
                    $('#sell-quantity').val(validSymbolQuantity);
                    var gainBtcPrice = validSymbolQuantity * $("#sell-rule-limit").val();
                    if (parseInt(gainBtcPrice) < 1) {
                        $("#sell-btc-price").text(gainBtcPrice.toFixed(8));
                    } else {
                        $("#sell-btc-price").text(gainBtcPrice);
                    }
                    $('#symbol-available').text(validSymbolQuantity);
                }
            });

            $(document).on('click', 'a.delete', function (event) {
                event.preventDefault();
                var targetElem = $(this);
                swal({
                    title: "Are you sure?",
                    text: "You will not be able to recover this data!",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, delete it!",
                    closeOnConfirm: false
                }, function () {
                    var targetHref = targetElem.attr('href');
                    $.ajax({
                        type: "GET",
                        url: targetHref,
                        success: function (data) {
                            if (!data.error) {
                                data.ids.forEach(function (id) {
                                    $('#' + id).closest('.list-item-block').remove();
                                    $('.option-' + id).remove();
                                });
                                if (data.parentRuleId) {
                                    var editButtonBody = "<a data-toggle='confirmation' " +
                                        "href='/binance-api/rule/" + data.parentRuleId + "'" +
                                        " class='btn fancybox default edit btn-xs green' " +
                                        "title='Edit'><i class='material-icons'>edit</i></a>";
                                    $('#' + data.parentRuleId).before(editButtonBody);
                                }
                                swal("Deleted!", "Your data has been deleted.", "success");
                                iziToast.success({
                                    title: 'SUCCESS',
                                    message: data.message
                                });
                            } else {
                                iziToast.error({
                                    title: 'ERROR',
                                    message: data.message
                                });
                            }
                        }
                    });
                });
            });

            $(document).on('click', 'a.edit', function (event) {
                event.preventDefault();
                var targetElem = $(this);
                var targetHref = targetElem.attr('href');
                $.ajax({
                    type: "GET",
                    url: targetHref,
                    success: function (data) {
                        if (!data.error) {
                            if (data.rule) {
                                if (data.rule.type === 'BUY') {
                                    $('#buy-rule-stop').val(data.rule.stop);
                                    $('#buy-rule-limit').val(data.rule.ruleLimit);
                                    $('#buy-quantity').val(data.rule.quantity);
                                    $('#buy-btc-price').text(data.rule.btcPrice);
                                    $('#sell-edit-cancel-button').trigger('click');
                                    $('#sell-edit-cancel-button').hide();
                                    $('#buy-edit-cancel-button').show();
                                    var buyRuleForm = $('.buy-rule-form');
                                    buyRuleForm.attr('action', '/binance-api/editRule/' + data.rule.id);
                                    buyRuleForm.attr('data-post-type', 'EDIT');
                                    window.scrollTo(0, 0);
                                } else if (data.rule.type === 'SELL') {
                                    $('#sell-rule-stop').val(data.rule.stop);
                                    $('#sell-rule-limit').val(data.rule.ruleLimit);
                                    $('#sell-quantity').val(data.rule.quantity);
                                    $('#sell-btc-price').text(data.rule.btcPrice);
                                    $('#buy-edit-cancel-button').trigger('click');
                                    $('#buy-edit-cancel-button').hide();
                                    $('#sell-edit-cancel-button').show();
                                    var sellRuleForm = $('.sell-rule-form');
                                    sellRuleForm.attr('action', '/binance-api/editRule/' + data.rule.id);
                                    sellRuleForm.attr('data-post-type', 'EDIT');
                                    window.scrollTo(0, 0);
                                }
                            }
                        } else {
                            iziToast.error({
                                title: 'ERROR',
                                message: data.message
                            });
                        }
                    }
                });
            });

            $('form').on('focus', 'input[type=number]', function (e) {
                $(this).on('mousewheel.disableScroll', function (e) {
                    e.preventDefault();
                });
            });
            $('form').on('blur', 'input[type=number]', function (e) {
                $(this).off('mousewheel.disableScroll');
            });


            {% for label, messages in app.flashes(['success']) %}
            {% for message in messages %}
            iziToast.success({
                title: 'SUCCESS',
                message: "{{ message }}"
            });
            {% endfor %}
            {% endfor %}

            {% for label, messages in app.flashes(['error']) %}
            {% for message in messages %}
            iziToast.error({
                title: 'ERROR',
                message: "{{ message }}"
            });
            {% endfor %}
            {% endfor %}
        });
    </script>
{% endblock %}